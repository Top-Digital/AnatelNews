ESPECIFICAÇÃO Anatel News.

1 - O que é: O Anatel News é plugin WordPress bem simples que vai se conectar em uma API para coletar as notícias mais recentes publicadas na Anatel. Será uma feita uma carga inicial com um número maior de notícias e a API irá consultar 3X por dia em busca de novas notícias. Serão consultados os ultimos N posts (Por exemplo N = 60), para conferir se houve atualização no texto do mesmo para que essas modificações sejam, juntamente com as novas notícias, atualiadas e nocaso da novas notícias criadas

Logo a Api ela terá um módulo que rodará via crontab no servidor da API, escrito em Python chamado: collect_news.py

import os
import logging
from dotenv import load_dotenv
import mongoengine as me
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
from datetime import datetime
import requests

# Carregar variáveis de ambiente do arquivo .env
load_dotenv()

MONGO_URI = os.getenv('MONGO_URI')
DB_NAME = os.getenv('DB_NAME')
SHOW_BROWSER = os.getenv('SHOW_BROWSER', 'False').lower() in ('true', '1', 't')
LOG_FILE = os.getenv('LOG_FILE', 'anatel_news.log')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
WEBHOOK_TOKEN = os.getenv('WEBHOOK_TOKEN')
NEWS_URL = os.getenv('NEWS_URL')
NEWS_COLLECTION = os.getenv('NEWS_COLLECTION')
NEWS_COLLECTION_NOT_POSTED = os.getenv('NEWS_COLLECTION_NOT_POSTED')

# Configura o log
logging.basicConfig(level=logging.INFO, filename=LOG_FILE)
logging.getLogger('selenium').setLevel(logging.WARNING)

# Conexão com MongoDB usando mongoengine
me.connect(db=DB_NAME, host=MONGO_URI)

# Configuração do Selenium
options = Options()
if not SHOW_BROWSER:
    options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')

driver = webdriver.Remote(
    command_executor='http://localhost:4444/wd/hub',
    options=options
)

# Definir os modelos MongoDB
from schemas.news_collection import NewsCollection
from schemas.news_collection_not_posted import NewsCollectionNotPosted

def format_html(content):
    try:
        soup = BeautifulSoup(content, 'html.parser')
        compact_html = ' '.join(str(soup).split())
        return compact_html
    except Exception as e:
        logging.error(f"Error formatting HTML content: {e}")
        return content.strip()

def collect_news_index():
    news_list = []
    url = NEWS_URL
    logging.info(f"Accessing URL: {url}")
    driver.get(url)
    news_elements = driver.find_elements(By.CSS_SELECTOR, '#ultimas-noticias > ul.noticias.listagem-noticias-com-foto > li')
    logging.info(f"Found {len(news_elements)} news elements")
    for index, news in enumerate(news_elements):
        news_data = {}
        try:
            news_data['anatel_URL'] = news.find_element(By.CSS_SELECTOR, 'div.conteudo > h2 > a').get_attribute('href')
        except Exception as e:
            news_data['anatel_URL'] = ''
            logging.error(f"Error collecting URL at index {index}: {e}")

        try:
            news_data['anatel_Titulo'] = format_html(news.find_element(By.CSS_SELECTOR, 'div.conteudo > h2 > a').get_attribute('innerHTML'))
        except Exception as e:
            news_data['anatel_Titulo'] = ''
            logging.error(f"Error collecting title at index {index}: {e}")

        try:
            news_data['anatel_SubTitulo'] = format_html(news.find_element(By.CSS_SELECTOR, 'div.conteudo > div.subtitulo-noticia').get_attribute('innerHTML'))
        except Exception as e:
            news_data['anatel_SubTitulo'] = ''
            logging.error(f"Error collecting subtitle at index {index}: {e}")

        try:
            news_data['anatel_ImagemChamada'] = news.find_element(By.CSS_SELECTOR, 'div.conteudo > div.imagem.mobile > img').get_attribute('src')
        except Exception as e:
            news_data['anatel_ImagemChamada'] = ''
            logging.error(f"Error collecting image at index {index}: {e}")

        try:
            news_data['anatel_Descricao'] = format_html(news.find_element(By.CSS_SELECTOR, 'div.conteudo > span > span.data').get_attribute('innerHTML'))
        except Exception as e:
            news_data['anatel_Descricao'] = ''
            logging.error(f"Error collecting description at index {index}: {e}")

        news_list.append(news_data)
    return news_list

def collect_news_details(news_url):
    logging.info(f"Collecting details for URL: {news_url}")
    driver.get(news_url)
    news_details = {}
    try:
        news_details['anatel_DataPublicacao'] = driver.find_element(By.CSS_SELECTOR, '#plone-document-byline > span.documentPublished').text.strip()
    except Exception as e:
        news_details['anatel_DataPublicacao'] = ''
        logging.error(f"Error collecting publication date for URL: {news_url}: {e}")

    try:
        news_details['anatel_DataAtualizacao'] = driver.find_element(By.CSS_SELECTOR, '#plone-document-byline > span.documentModified').text.strip()
    except Exception as e:
        news_details['anatel_DataAtualizacao'] = ''
        logging.warning(f"Warning: Could not collect update date for URL: {news_url}: {e}")

    try:
        news_details['anatel_ImagemPrincipal'] = driver.find_element(By.CSS_SELECTOR, '#media > img').get_attribute('src')
    except Exception as e:
        news_details['anatel_ImagemPrincipal'] = ''
        logging.error(f"Error collecting main image for URL: {news_url}: {e}")

    try:
        news_details['anatel_TextMateria'] = format_html(driver.find_element(By.CSS_SELECTOR, '#parent-fieldname-text > div').get_attribute('innerHTML'))
    except Exception as e:
        news_details['anatel_TextMateria'] = ''
        logging.error(f"Error collecting article text for URL: {news_url}: {e}")

    try:
        news_details['anatel_Categoria'] = driver.find_element(By.CSS_SELECTOR, '#form-widgets-categoria').text.strip()
    except Exception as e:
        news_details['anatel_Categoria'] = ''
        logging.error(f"Error collecting category for URL: {news_url}: {e}")

    return news_details

def send_to_wordpress(data):
    url = WEBHOOK_URL
    headers = {'Content-Type': 'application/json', 'X-Webhook-Token': WEBHOOK_TOKEN}
    response = requests.post(url, json=data, headers=headers)
    return response

def collect_and_post_news():
    logging.info("Starting news collection")
    news_index = collect_news_index()
    required_fields = ['anatel_URL', 'anatel_Titulo', 'anatel_DataPublicacao', 'anatel_TextMateria']

    for news in news_index:
        if news['anatel_URL']:
            details = collect_news_details(news['anatel_URL'])
            news.update(details)
            if all(news.get(field) for field in required_fields):
                existing_news = NewsCollection.objects(anatel_URL=news['anatel_URL']).first()
                if existing_news:
                    if existing_news.anatel_DataAtualizacao != news['anatel_DataAtualizacao']:
                        news['wordpress_AtualizacaoDetected'] = True
                        existing_news.update(**news)
                        response = send_to_wordpress(news)
                        if response.status_code == 200:
                            news['wordpress_AtualizacaoDetected'] = False
                            news['wordpress_DataAtualizacao'] = news['anatel_DataAtualizacao']
                            existing_news.update(**news)
                            logging.info(f"Updated existing news: {news['anatel_URL']}")
                else:
                    response = send_to_wordpress(news)
                    if response.status_code == 200:
                        news['wordpressPostId'] = response.json().get('post_id')
                        news['wordpress_DataPublicacao'] = datetime.now().isoformat()
                        NewsCollection(**news).save()
                        logging.info(f"Saved new news: {news['anatel_URL']}")
            else:
                NewsCollectionNotPosted(**news).save()
                logging.info(f"Saved news to not posted collection: {news['anatel_URL']}")

if __name__ == '__main__':
    collect_and_post_news()
    driver.quit()



Vamos transformar esse recurso em uma API para o WP conectar a nessa API com objetivo de coletar novos posts, atualizar existentes e deletar se ele estiver marcado para deletar na base original. Vamos seguir os passos:

1- Quando o WP chamar a API, na rota  /getnewposts GET ou POST (o que form mais apropriado), a consulta a base será feita, usando a base news que tem os seguintes campos no mongodb:

import mongoengine as me
from config.config import NEWS_COLLECTION

class NewsCollection(me.Document):
    anatel_URL = me.StringField(required=True, unique=True, index=True)
    anatel_Titulo = me.StringField(required=True)
    anatel_SubTitulo = me.StringField(required=True)
    anatel_ImagemChamada = me.StringField(required=True)
    anatel_Descricao = me.DateTimeField(required=True)
    anatel_DataPublicacao = me.DateTimeField(required=True)
    anatel_DataAtualizacao = me.DateTimeField(required=False, default=None)
    anatel_ImagemPrincipal = me.StringField(required=True)
    anatel_TextMateria = me.StringField(required=True)
    anatel_Categoria = me.StringField(required=True)
    anatel_PostIsRemoved = me.BooleanField(required=True, default=False)
    anatel_ErrorToFix = me.BooleanField(required=True, default=False)
    anatel_ErrorDescription = me.StringField(required=False, default=None)
    anatel_ErrorDate = me.DateTimeField(required=False, default=None)
    wordpressPostId = me.StringField( required=False, default=None)
    wordpress_DataPublicacao = me.DateTimeField(required=False, default=None)
    wordpress_AtualizacaoDetected = me.BooleanField(required=False, default=None)
    wordpress_DataAtualizacao = me.DateTimeField(required=False, default=None)
    mailchimpSent = me.BooleanField(required=False, default=None)
    mailchimp_DataEnvio = me.DateTimeField(required=False, default=None)
    
    meta = {
        'collection': NEWS_COLLECTION
    }

O mongoengine faz atualmente a seguinte consulta:

documents = NewsCollection.objects(Q(wordpressPostId__exists=False) | Q(wordpressPostId="")).order_by('-anatel_DataPublicacao')

Só que existe o campo anatel_DataAtualizacao, se este campo tiver uma data maior que anatel_DataPublicacao, o post precisa ser atualizado ao invés de criado. E também não pode subir posts com anatel_ErrorToFix = True

E também existe um campo anatel_PostIsRemoved que se tiver true é para mover para lixeira o post no blog

Bom A analise será post por post. Se o post foi criado/atualizado ou deletado e na base mongo wordpress_DataAtualizacao for atualizadea, para aquele post retona sucesso da classe 200. E deverá retornar o ID do post no wordpress e atualizar wordpress_DataPublicacao, caso esteja vazio, ou wordpress_DataAtualizacao caso for uma atualização. Esse campo wordpress_AtualizacaoDetected está deprecated.

Se em um post em específico der um erro, retorna erro da classe 500,grava na base mongo:  atualiza anatel_ErrorToFix=True, anatel_ErrorDescription=[descrição completa do erro], anatel_ErrorDate=[Dta do Erro]

Como existem uma biblioteca chamada python-wordpress-xmlrpc, vamos trabalhar com ela.

Pela definição da Tabela NEWS_COLLECTION você percebe uma série de campos obrigatórios e opcionais. Os obrigatórios se não estiverem preenchidos você lança um erro também e seta errotofix e explica o motivo.

anatel_Titulo, anatel_TextMateria e anatel_DataPublicacao são os campos de um post padrão WordPress. anatel_DataPublicacao do banco de dados deverá ser o mesmo no wordpress. Explicando em outras palavras, ao cadastrar o post ele não é NOW() na data de publicanção, ele é a data do campo anatel_DataPublicacao.

Os campos restantes são metadados para quando eu for montar o modelo do post poder usar ele, tais como anatel_ImagemChamada, anatel_Descricao, etc

São metadadados:

    anatel_URL 
    anatel_SubTitulo 
    anatel_ImagemChamada 
    anatel_Descricao 
    anatel_DataAtualizacao 
    anatel_ImagemPrincipal 
    anatel_Categoria 

2 - O plugin PHP

 Qual o objetivo o plugin anatelnews.zip: 

 1 - Cadastrar o token caso seja necessário a criação de um tocken para identificar o usuário por segurança. Podemos usar o JWTAPI e quando o WP for requisita descriptografa e compara com WORDPRESS_USER e WORDPRESS_PASSWORD de .env
 2 - Na tela de configuirações do AnatelNews, ter a opção de ocultar os posts da categoria selecionada (item 3)
 3 - Selecionar a categoria a qual os posts serão cadastrados. Se o usuário resolver alterar a categoria os Posts até então continuam na categoria onde estavam. Só os novos novos serão cadastrados na nova categoria
